/***************************************************************************
 *                        README                                           *
 *  copyright            : (C) 2004 by Bob Smith                           *
 *                                                                         *
 *   This file is the README for the empty daemon program which            *
 * illustrates how to build a daemon using the Run Time Access             *
 * package and select().                                                   *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   THE AUTHOR RENOUNCES ALL COPYRIGHT TO THIS WORK.                      *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it for redistribution as you see fit.  Specifically, you may use this *
 *   as the basis of your software and you need not make public your       *
 *   programs or other work derived from this program.  You may remove     *
 *   the above copyright in any derived work.                              *
 *                                                                         *
 *   However, please let the authors of this program know if you find bugs *
 *   or security problems in the program.                                  *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *  Change Log:                                                            *
 *     2004 March 5: Initial release                                       *
 ***************************************************************************/

 CONTENTS
- Purpose and Overview
- General design
- Logging and log messages
- Known bugs and issues
- COPYING



- Purpose and Overview
  This series of files implements a simple select() based daemon which
is an empty shell into which you can place your own functionality.  This
prototype daemon is different in that it uses Run-Time-Access (RTA) to
provide visibility into the tables and configuration.  It is a prototype
upon which you can build an RTA application.

  Clearly you will need to modify the files to suit your needs.  We have
tried to comment the code to make this easy and for the most part the
architecture is such that you should not need to modify the core files
very much.   Add your own code and make your tables visible to RTA.



- General design
  The general architecture is one of tables and callbacks.  For example,
you can use add_timer() to request notification after a specified number of
milliseconds.  The nature of the notification is a call to a subroutine
that you passed in with add_timer().  Registered timers are stored in the
Timers table which has the expiration time, the subroutine to call at
time-out, a count of the number of times the timers has expired (for 
periodic timers), and a transparent void pointer passed as an argument
to the timer callback.

  The same callback scheme is used for file IO.  You register a file
descriptor with a call to add_fd().  This call records in a table the
subroutines to call when there is read or write activity on the file
descriptor.  The table of file descriptors, Fd_Desc, also keeps
statistics on the number of errors, reads, and writes, as well as
counts of the number of bytes read and written.

  Configuration and management of the daemon is done using the Run Time
Access (RTA) Package.  Configuration is, of course, stored in a table.
The table has the following columns:
 - daemonize:   1 to daemonize, 0 to stay in foreground
 - RTA port:    integer.  The TCP port for RTA connections
 - RTA addr:    The IP address for RTA conns.  default is 127.0.0.1
 - config dir:  Desired configuration directory.
 - gid:         integer or group name.
 - uid:         integer or user name.
 - pidfile:     file name.  No pidfile if null.
 - version:     string.  Version of this daemon.
 - trigger:     integer.  Set to 1 to open RTA port.

  The configuration has two rows.  The first row is the saved values to
be used unless the user overrides them with a command line option.  The
second row is the working values to be used when doing the actual
configuration.  Command line options affect the second row but not the
first row.  See the config.c file for more details.

SECURITY:
  If you are paranoid about security you should change all of the
Config table columns to RTA_READONLY and set the ownership and
permissions of the Config save file, Config.sql, to root and 644
respectively. 


- Logging and log messages
  We have a fairly flexible approach to logging.  We break the software
into different sections, for example, "main", "select", "timers", and
so forth.  Then, for each section, we define a log threshold.  If a log
message in the code has a threshold less than the threshold set in the
logging table, the log message is sent.  This means that while your
program is running you can change the logging threshold for different
part of your code.  Each section also has a control to specify if the
log message should be sent to syslog, or stderr, or both.  See the
logit.c file for more details.

  The following is a list of the log messages that indicate a lack of
resources in the daemon.  We try to continue on when these problems
occur but you should investigate if you see any of the following:
      "Too many UI connections.  Dropping oldest one."
      "Too many file descriptors in select loop"
      "Too many timers in use"

  The following errors indicate a problem with the environment in
which the deamon is trying to run.  You should check the permissions
and configuration to resolve these problems:
      "Another daemon is already running. PID=%d"
      "Can not set up TCP socket for RTA port %d"
      "Invalid configuration directory: %s"
      "Unable to create new PID file.  File=%s"

  Some errors are generated if a sanity check fails.  You should
check your code carefully if you see any of the following:
      "Can not accept TCP connection from the user interface"
      "Can not listen on negative file descriptor"
      "Can not remove non-existent file descriptor, %d"
      "Error #%d while writing to TCP conn at port #%d on IP=%d"
      "No connection for file descriptor = %d"
      "Periodic timers must have non-zero intervals"
      "Trying to unlink non-existent timer"

  And some errors should just not occur:
      "select() error #%d -- exit"
      "Unable to allocate memory"
      "Unable to get time"



- Known bugs and issues
  The select() exits on *any* errors.  This is almost certainly a
bug.  It should try to recover on errors such as 'interrupted system
call' and the like.



- COPYING
 THE AUTHOR RENOUNCES ALL COPYRIGHT TO THIS WORK.
This program is free software; you can redistribute it and/or modify
it for redistribution as you see fit.  Specifically, you may use this
as the basis of your software and you need not make public your
programs or other work derived from this program.  You may remove
the copyright notice from any of these files with this author's
permission.  

The program is provided 'as is' and is without warranty of any kind.

The above notwithstanding, please let the author of this program know
if you find bugs or security problems in the code.





